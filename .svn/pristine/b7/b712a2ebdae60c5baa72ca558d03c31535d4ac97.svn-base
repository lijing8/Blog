package springTest.web.service;


import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.TreeSet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import springTest.web.dao.BlogDAO;
import springTest.web.dao.ClassifyDAO;
import springTest.web.entity.BlogEntity;
import springTest.web.entity.CommentEntity;
import springTest.web.util.BlogDateComparator;
import springTest.web.util.BlogViewsComparator;

@Service
public class BlogService {

	@Autowired
	private BlogDAO dao;

	@Autowired
	private ClassifyDAO classifyDao;
	

	/**
	 * 保存博文
	 * @param classifyid 文章分类编号
	 * @param title 文章标题
	 * @param body 文章内容
	 */
	public void saveBlog(int classifyid, String title,String body,int blogId,String isedit){
		BlogEntity blog = new BlogEntity();
		
		if("true".equals(isedit)){
			blog = dao.getBolg(blogId);
		}

		blog.setBlogTitle(title);

		blog.setBlogBody(body);

		blog.setBlogDate(new Date());

		blog.setClassify(classifyDao.viewClassify(classifyid));
		

		String abs = new String(body);
		abs.replace("\r", "");
		abs.replace("\n", "");
		abs=abs.replace("</p>", "\r\n");
		abs=abs.replaceAll("<(.[^>]*)>","");
		abs=abs.replace("&nbsp;", "");
		abs=abs.replace(" ","");
		abs=abs.replace("　", "");
		if(body.length()>280){
			abs = abs.substring(0,280);
			abs=abs+"……";
		}
		blog.setBlogAbstract(abs);

		String fiu = new String(body);
		if(fiu.indexOf("img")!=-1){
			fiu = fiu.substring(fiu.indexOf("img"));
			fiu = fiu.substring(fiu.indexOf("src"));
			fiu = fiu.substring(fiu.indexOf("\"")+1);
			fiu = fiu.substring(0,fiu.indexOf("\""));
		} else {
			fiu=null;
		}

		blog.setFirstImgUrl(fiu);
		
		if("true".equals(isedit)){
			dao.updateBlog(blog);
		}else{
			blog.setViews(0);
			dao.addBlog(blog);
		}
	}

	/**
	 * 列出文章列表，每页文章数为10，静态成员变量维护
	 * @param classifyid 文章分类，0代表全部文章
	 * @param tarpage 目标页数
	 * @return 文章列表
	 */
	public List<BlogEntity> getBloglist(String classifyid , String tarpage, String pagesize){
		int cid=0;
		if(null!=classifyid && classifyid.trim().length()!=0){
			cid=new Integer(classifyid).intValue();
		}		
		ArrayList<BlogEntity> list =  new ArrayList<BlogEntity>(dao.getBlogList(new Integer(tarpage).intValue(),new Integer(pagesize).intValue(), cid));
		Comparator<BlogEntity> c = new BlogDateComparator();
		Collections.sort(list, c);
		return list;
	}

	/**
	 * 获取最大页数
	 * @param classifyid 文章分类，0代表全部文章
	 * @return 最大页数
	 */
	public Integer getMaxPage(String classifyid, String pageSize){
		int cid=0;
		int pagesize= new Integer(pageSize).intValue();
		if(null!=classifyid && classifyid.trim().length()!=0){
			cid=new Integer(classifyid).intValue();
		}
		int maxpage = (dao.getBolgNum(cid)+pagesize-1)/pagesize;
		return new Integer(maxpage);
	}

	/**
	 * 获取目标文章详情
	 * @param id 文章id
	 * @return 文章详情
	 */
	public BlogEntity getBlog(int id){
		BlogEntity be = dao.getBolg(id);
		TreeSet<CommentEntity> comms = new TreeSet<>(be.getComments());
		be.setComments(comms);		
		return be;
	}

	/**
	 * 获取浏览最多5篇文章列表
	 * @return 5篇文章列表
	 */
	public List<BlogEntity> getTop5Blog(){
		ArrayList<BlogEntity> list = new ArrayList<BlogEntity>(dao.getTop5Blog());
		Comparator<BlogEntity> c = new BlogViewsComparator();
		Collections.sort(list, c);
		return list;
	}
	
	public void delBlog(int id){
		dao.delBlog(id);
	}
	public void addviews(int id){
		dao.addViews(id);
	}
	
	public HashMap<String,ArrayList<String>> getComm5Blogs(){
		HashMap<String, ArrayList<String>> rst = new HashMap<String, ArrayList<String>>();
		ArrayList<Object[]> records = dao.getComm5Blogs();
		ArrayList<String> comms = new ArrayList<String>();
		ArrayList<String> blogid = new ArrayList<String>();
		ArrayList<String> blogtitle = new ArrayList<String>();
		for(int i=0 ; i<records.size() ; i++){			
			blogid.add(records.get(i)[0].toString());
			blogtitle.add(records.get(i)[1].toString());
			comms.add(records.get(i)[2].toString());
		}
		
		rst.put("comms", comms);
		rst.put("blogid", blogid);
		rst.put("blogtitle", blogtitle);
		
		return rst;
	}
}
